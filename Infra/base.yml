AWSTemplateFormatVersion: '2010-09-09'
Resources:
  RightstartVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: ${self:custom.values.VPC_CIDR_BLOCK}
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnetRightstart:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref RightstartVPC
      CidrBlock: !Select [ 0, '${self:custom.values.CIDR_BLOCKS}']
    DependsOn:
      - Nacl
  PrivateSubnetRightstart:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref RightstartVPC
      CidrBlock: !Select [ 1, '${self:custom.values.CIDR_BLOCKS}']
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
    DependsOn:
      - Nacl
  IGWRightstart:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Owner
          Value: Arvind

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref RightstartVPC
    DependsOn:
      - IGWRightstart
  Route1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGWRightstart

  EC2VPCG1ZPCD:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref RightstartVPC
      InternetGatewayId: !Ref IGWRightstart

  RightstartDb:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBSubnetGroupName: !Ref DbSubnet
      VPCSecurityGroups:
        - !Ref DbSG
      DBName: '${self:custom.values.DATABASE_NAME}'
      Engine: MySql
      EngineVersion: 5.7.25
      MasterUserPassword: '${self:custom.values.DATABASE_PASSWORD}'
      MasterUsername: '${self:custom.values.DATABASE_USER}'
      DBInstanceClass: db.t2.small
      AllocatedStorage: 100

  DbSubnet:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      SubnetIds:
        - !Ref PrivateSubnetRightstart
        - !Ref PrivateSubnet2
      DBSubnetGroupDescription: subnet

  DbSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref RightstartVPC
      GroupDescription: Db Sg

  LambdaSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref RightstartVPC
      GroupDescription: Lambda SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
    DependsOn:
      - RouteTable
  EC2SGIU7AS:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DbSG
      SourceSecurityGroupId: !Ref LambdaSG
      IpProtocol: -1

  Nacl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref RightstartVPC

  EC2SGE27ENP:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref LambdaSG
      DestinationSecurityGroupId: !Ref DbSG
      IpProtocol: -1

  EC2SNAA40CZF:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref PrivateSubnetNacl
      SubnetId: !Ref PrivateSubnetRightstart

  PrivateIngressEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateSubnetNacl
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Select [ 0, '${self:custom.values.CIDR_BLOCKS}']

  PrivateSubnetNacl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref RightstartVPC

  PrivateEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateSubnetNacl
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Select [ 0, '${self:custom.values.CIDR_BLOCKS}']
      Egress: true

  IngressEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: 0.0.0.0/0

  Egress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref Nacl
      RuleNumber: 100
      RuleAction: allow
      Protocol: -1
      CidrBlock: 0.0.0.0/0
      Egress: true

  EC2SGI1JDWB:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DbSG
      SourceSecurityGroupId: !Ref LambdaSG
      IpProtocol: -1

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref RightstartVPC
      CidrBlock: !Select [ 2, '${self:custom.values.CIDR_BLOCKS}']
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

  EC2SNAA1NLI8:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref PrivateSubnetNacl
      SubnetId: !Ref PrivateSubnet2

  # Instance:
  #   Type: 'AWS::EC2::Instance'
  #   Properties:
  #     NetworkInterfaces:
  #       - GroupSet:
  #           - Ref: LambdaSG
  #         DeviceIndex: '0'
  #         AssociatePublicIpAddress: 'true'
  #         SubnetId: !Ref PublicSubnetRightstart
  #     InstanceType: t2.small
  #     ImageId: ami-035b3c7efe6d061d5
  #     KeyName: Custom-Instance-testing
  #   DependsOn:
  #     - IGWRightstart
  EC2SRTA3OGGH:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnetRightstart

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnetRightstart
      AllocationId:
        'Fn::GetAtt':
          - EIP
          - AllocationId

  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      NatGatewayId: !Ref NatGateway
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable2

  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref RightstartVPC

  LambdaPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref RightstartVPC
      CidrBlock: !Select [ 3, '${self:custom.values.CIDR_BLOCKS}']

  EC2SRTA4P5JM:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref LambdaPrivateSubnet
      RouteTableId: !Ref PrivateRouteTable2

  PrivateEgress2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateSubnetNacl
      RuleNumber: 101
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Select [ 3, '${self:custom.values.CIDR_BLOCKS}']
      Egress: true

  PrivateIngress2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateSubnetNacl
      RuleNumber: 101
      RuleAction: allow
      Protocol: -1
      CidrBlock: !Select [ 3, '${self:custom.values.CIDR_BLOCKS}']

  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: no_artifacts
      Description: Right start code build
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/standard:2.0'
        EnvironmentVariables:
          - Name: DATABASE_NAME
            Value: '${self:custom.values.DATABASE_NAME}'
          - Name: DATABASE_USER
            Value: '${self:custom.values.DATABASE_USER}'
          - Name: DATABASE_PASSWORD
            Value: '${self:custom.values.DATABASE_PASSWORD}'
          - Name: DATABASE_HOST
            Value: '${self:custom.values.DATABASE_HOST}'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODECOMMIT
        Location: >-
          ${self:custom.values.CODE_COMMIT_REPO_URL}
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSG
        Subnets:
          - !Ref LambdaPrivateSubnet
        VpcId: !Ref RightstartVPC

  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - '*'
                Effect: Allow
                Resource: '*'

  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Location: !Ref s3codepipeline
        Type: S3
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Commit
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              RunOrder: 1
              Configuration:
                RepositoryName: ${self:custom.values.CODE_COMMIT_REPO_NAME}
                BranchName: master
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              RunOrder: 2
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CodeBuild

  s3codepipeline:
    Type: 'AWS::S3::Bucket'
    Properties: {}

  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - '*'
                Effect: Allow
                Resource: '*'

